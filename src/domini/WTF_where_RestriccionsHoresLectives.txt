package domini;

public class RestriccionsHoresLectives {

    protected static boolean AssignaturesNivell(Assignatura assig, Assignatures assignaturesPE, HoraLectiva solucio) {
        for(int i = 0; i < solucio.mida(); ++i){
            String codiAssigSol = solucio.getAssignacio(i).getCodiAssig();
            if(assignaturesPE.getAssignatura(codiAssigSol).getNivell() == assig.getNivell() ) return false;
        }
        return true;
    }

    protected static boolean AssignaturesCorrequisits(Assignatura assig, HoraLectiva solucio){
        for (int i = 0; i < assig.getCorrequisits().size(); i++) {
            for (int j = 0; j < solucio.mida(); j++) {
                String codiAssigSol = solucio.getAssignacio(i).getCodiAssig();
                if (assig.getCorrequisit(i).equals(codiAssigSol)) return false;
            }
        }
        return true;
    }

    protected static boolean AulaOcupada(Aula aula, HoraLectiva solucion) {
        for (int i = 0; i < solucion.mida(); i++) {
            if (solucion.getAssignacio(i).getCodiAssig().equals(aula.getCodi())) return false;
        }
        return true;
    }

    protected static boolean ColissioGrupTeoriaAmbLab(Assignacio asg, HoraLectiva solucion, Assignatures assignaturesPE) throws CloneNotSupportedException {
        boolean isGrup = (asg.getNumGrup() % 10 == 0);
        Assignatura assig = (Assignatura) assignaturesPE.getAssignatura(asg.getCodiAssig()).clone();
        if(isGrup) {
            int numGrup = asg.getNumGrup();
            Grup g = assig.getGrupAmbNum(numGrup);
            for (int i = 0; i < solucion.mida(); i++) {
                for (int j = 0; j < g.getSubGrups().size(); j++) {
                    if(solucion.getAssignacio(i).getNumGrup() == g.getSubGrup(j).getNumSubGrup()) return false;
                }
            }
        }
        else {
            // si la ASG es de un SubGrup i a SOLUCION el GrupTeoria pare ja esta asignat -> return false
            int numSubGrup = asg.getNumGrup();
            int numGrup = (numSubGrup)-(Math.abs(numSubGrup) % 10);
            for (int i = 0; i < solucion.mida(); i++) {
                if (solucion.getAssignacio(i).getNumGrup() == numGrup) return false;
            }
        }
        return true;
    }

    protected static boolean TipusAula(SubGrup sg, Aula aula){
        return ((aula.isLab() && sg.isAmbPCs()) || (!aula.isLab() && !sg.isAmbPCs()));
    }

    protected static boolean TamanyAula(Grup g, Aula a) {
        return (g.getCapacitat() <= a.getCapacitat());
    }

    protected static boolean TamanyAula(SubGrup sg, Aula a) {
        return (sg.getCapacitatSG() <= a.getCapacitat());
    }
}
